#+TITLE: Sicp Ex 1.01

#+DATE: 2020-10-13

So I had just started reading SICP. It's this amazing book that was used
to teach Comp Sc. to students who had never programmed before at MIT.
When I thought that I should write a blog post with a solution for every
exercise I attempt. So I am gonna write solutions for all the exercise
in SICP. My plan is to finish this book in one year.

You can obtain a copy of SICP for free because of
[[https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/][MIT-Open
course ware!]]

* My setup
  :PROPERTIES:
  :CUSTOM_ID: my-setup
  :END:

My plan is to use emacs(sorry for the adultery vim!) with slime, and
guile. I haven't setup it up yet, though I will attach a link to the
post when I do. I strongly encourage you to setup emacs though because
soon the exercises will get really complicated, and the support emacs
has for Lisp (Being written in lisp itself) will be really helpful while
editing.

So without further delay, Let's get to the exercise

* The Question
  :PROPERTIES:
  :CUSTOM_ID: the-question
  :END:

*Exercise 1.1:* Below is a sequence of expressions. What is the result
printed by the interpreter in response to each expression? Assume that
the sequence is to be evaluated in the order in which presented.

#+BEGIN_SRC scheme
  10
  (+ 5 3 4)
  (- 9 1)
  (/ 6 2)
  (+ (* 2 4) (- 4 6))
  (define a 3)
  (define b (+ a 1))
  (+ a b (* a b))
  (= a b)
  (if (and (> b a) (< b (* a b)))
      b
      a)
  (cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25))
  (+ 2 (if (> b a) b a))
  (* (cond) ((> a b) a)
            ((< a b) b)
            (else -1))
     (+ a 1)
#+END_SRC

* My Thoughts
  :PROPERTIES:
  :CUSTOM_ID: my-thoughts
  :END:

So far, the authors have been explaining about the basic syntax of
scheme. If you are reading this, you most likely also read SICP till
this exercise. So I am not gonna speak much about it, but make a table
of the syntax:

#+BEGIN_HTML
  <table>
#+END_HTML

#+BEGIN_HTML
  <colgroup>
#+END_HTML

#+BEGIN_HTML
  <col style="width: 33%" />
#+END_HTML

#+BEGIN_HTML
  <col style="width: 33%" />
#+END_HTML

#+BEGIN_HTML
  <col style="width: 33%" />
#+END_HTML

#+BEGIN_HTML
  </colgroup>
#+END_HTML

#+BEGIN_HTML
  <thead>
#+END_HTML

#+BEGIN_HTML
  <tr class="header">
#+END_HTML

#+BEGIN_HTML
  <th style="text-align: right;">
#+END_HTML

Scheme syntax

#+BEGIN_HTML
  </th>
#+END_HTML

#+BEGIN_HTML
  <th style="text-align: center;">
#+END_HTML

English equivalent

#+BEGIN_HTML
  </th>
#+END_HTML

#+BEGIN_HTML
  <th style="text-align: left;">
#+END_HTML

Python Equivalent

#+BEGIN_HTML
  </th>
#+END_HTML

#+BEGIN_HTML
  </tr>
#+END_HTML

#+BEGIN_HTML
  </thead>
#+END_HTML

#+BEGIN_HTML
  <tbody>
#+END_HTML

#+BEGIN_HTML
  <tr class="odd">
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: right;">
#+END_HTML

<<cb1>>

#+BEGIN_HTML
  <pre class="sourceCode scheme"><code class="sourceCode scheme"><a class="sourceLine" id="cb1-1" title="1">(<span class="ex">define</span><span class="fu"> variable </span>value)</a></code></pre>
#+END_HTML

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: center;">
#+END_HTML

variable is value

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: left;">
#+END_HTML

<<cb2>>

#+BEGIN_HTML
  <pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" title="1">variable <span class="op">=</span> value</a></code></pre>
#+END_HTML

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  </tr>
#+END_HTML

#+BEGIN_HTML
  <tr class="even">
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: right;">
#+END_HTML

<<cb3>>

#+BEGIN_HTML
  <pre class="sourceCode scheme"><code class="sourceCode scheme"><a class="sourceLine" id="cb3-1" title="1">(<span class="ex">define</span><span class="fu"> func </span>(params)</a>
  <a class="sourceLine" id="cb3-2" title="2">   body)</a></code></pre>
#+END_HTML

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: center;">
#+END_HTML

func is a set of instr uctions done with the help of params

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: left;">
#+END_HTML

<<cb4>>

#+BEGIN_HTML
  <pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">def</span> func(params):</a>
  <a class="sourceLine" id="cb4-2" title="2">    body</a></code></pre>
#+END_HTML

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  </tr>
#+END_HTML

#+BEGIN_HTML
  <tr class="odd">
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: right;">
#+END_HTML

<<cb5>>

#+BEGIN_HTML
  <pre class="sourceCode scheme"><code class="sourceCode scheme"><a class="sourceLine" id="cb5-1" title="1">(func params)</a></code></pre>
#+END_HTML

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: center;">
#+END_HTML

Using a set of instruc tions called func with the help of params

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: left;">
#+END_HTML

<<cb6>>

#+BEGIN_HTML
  <pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb6-1" title="1"> func(params)</a></code></pre>
#+END_HTML

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  </tr>
#+END_HTML

#+BEGIN_HTML
  <tr class="even">
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: right;">
#+END_HTML

<<cb7>>

#+BEGIN_HTML
  <pre class="sourceCode scheme"><code class="sourceCode scheme"><a class="sourceLine" id="cb7-1" title="1">(<span class="kw">cond</span> (p1 e1)</a>
  <a class="sourceLine" id="cb7-2" title="2">      <span class="co">;;...</span></a>
  <a class="sourceLine" id="cb7-3" title="3">      (pn en))</a></code></pre>
#+END_HTML

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: center;">
#+END_HTML

If p1 is true, do e1. (can be used as many ti- mes as required) p1 is a
test, and e1 is an e- xpression

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: left;">
#+END_HTML

<<cb8>>

#+BEGIN_HTML
  <pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb8-1" title="1"><span class="cf">if</span> p1: e1</a>
  <a class="sourceLine" id="cb8-2" title="2"><span class="co"># ...</span></a>
  <a class="sourceLine" id="cb8-3" title="3"><span class="cf">elif</span> pn: en</a></code></pre>
#+END_HTML

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  </tr>
#+END_HTML

#+BEGIN_HTML
  <tr class="odd">
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: right;">
#+END_HTML

<<cb9>>

#+BEGIN_HTML
  <pre class="sourceCode scheme"><code class="sourceCode scheme"><a class="sourceLine" id="cb9-1" title="1">(<span class="kw">if</span> predicate consequent</a>
  <a class="sourceLine" id="cb9-2" title="2">    alternative</a></code></pre>
#+END_HTML

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: center;">
#+END_HTML

If predicate is true, do consequent, else, do al- ternative.

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td style="text-align: left;">
#+END_HTML

<<cb10>>

#+BEGIN_HTML
  <pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb10-1" title="1"><span class="cf">if</span> predicate: consequent</a>
  <a class="sourceLine" id="cb10-2" title="2"><span class="cf">else</span>: alternative</a></code></pre>
#+END_HTML

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  </tr>
#+END_HTML

#+BEGIN_HTML
  </tbody>
#+END_HTML

#+BEGIN_HTML
  </table>
#+END_HTML

* Answers
  :PROPERTIES:
  :CUSTOM_ID: answers
  :END:

So now that we have got out table, let us get started. To check our
answers we can use the
[[https://www.gnu.org/software/mit-scheme/documentation/testing/mit-scheme-user.html][Scheme
shell]]

#+BEGIN_QUOTE
  10
#+END_QUOTE

That will return 10

#+BEGIN_QUOTE
  (+ 5 3 4)
#+END_QUOTE

=(+ 5 3 4)= is basically "sum of 5,3,4" but in
[[https://en.wikipedia.org/wiki/Polish_notation][prefix notation]]. That
will be 12.

#+BEGIN_QUOTE
  (- 9 1)
#+END_QUOTE

9 - 1 is 8. So it will return 8

#+BEGIN_QUOTE
  ( / 6 2)
#+END_QUOTE

$6 \div 2$ is 3. So 3.

#+BEGIN_QUOTE
  (+ (* 2 4) (- 4 6))
#+END_QUOTE

First, $2 \times 4$ is 8 and 4 - 6 is -2. Then 8 + -2 is 6.

#+BEGIN_QUOTE
  (define a 3)
#+END_QUOTE

=a= is now three.

#+BEGIN_QUOTE
  (define b (+ a 1)))
#+END_QUOTE

So b will be a + 1 , which is 3 + 1, which equals to 4.

#+BEGIN_QUOTE
  (+ a b (* a b))
#+END_QUOTE

First $a \times b = 3 \times 4 = 12$. Then 3 + 4 + 12 = 19.

#+BEGIN_QUOTE
  (= a b)
#+END_QUOTE

Now, this test that will output a Boolean. Since 3 is */not/* = 4, it
will be False.

#+BEGIN_QUOTE
  (if (and (> b a) (< b (* a b))) b a)
#+END_QUOTE

=and= adds to the test, and now checks if */both/*(=(> b a)= and
=(< b (* a b) ))= return true. Since 4 is greater than 3 and 4 is lesser
than 12, this returns True, and 4 is returned.

#+BEGIN_QUOTE
  (cond ((= a 4) 6) ((= b 4) (+ 6 7 a)) (else 25))
#+END_QUOTE

=b = 4= is the first thing that came true so, what will be returned will
be 6 + 7 + 3 = 10.

#+BEGIN_QUOTE
  (* (cond ((> b a) b a)) ((< a b) b) (else -1)) (+ a 1))
#+END_QUOTE

This just multiplies whatever =cond= returns by 4. =cond= returns 4, so
$4^{2} = 16$

That's it! Tell us about in the comments below about your experience
with SICP so far!
