<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lisp on Ben&#39;s Solutions to Sicp</title>
    <link>https://benjamin-philip.github.io/sicp/tags/lisp/</link>
    <description>Recent content in Lisp on Ben&#39;s Solutions to Sicp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://benjamin-philip.github.io/sicp/tags/lisp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exercise 1.4</title>
      <link>https://benjamin-philip.github.io/sicp/exercises/sicp-ex-1-04/</link>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://benjamin-philip.github.io/sicp/exercises/sicp-ex-1-04/</guid>
      <description>This the 4th Exercise in SICP
The Question Exercise 1.4: Observe that our model of evaluation allows for more combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:
(define (a-plus-abs-b a b) ((if (&amp;gt; b 0) + - ) a b)) The Answer Now in this case, all that is being done is:
 Check if b is positive or negative And run (+ a b) if b is positive, or run (- a b) if negative.</description>
    </item>
    
    <item>
      <title>Exercise 1.5</title>
      <link>https://benjamin-philip.github.io/sicp/exercises/sicp-ex-1-05/</link>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://benjamin-philip.github.io/sicp/exercises/sicp-ex-1-05/</guid>
      <description>This is the 5th Exercise of SICP. Here we compare a process when run on a Applicative order interpreter and when run on a Normal-order interpreter.
The Question Exercise 1.5: Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:
(define (p) (p)) (define (test x y) (if (= x 0) 0 y)) Then he evaluates the expression (test 0 (p))</description>
    </item>
    
    <item>
      <title>Exercise 1.2</title>
      <link>https://benjamin-philip.github.io/sicp/exercises/sicp-ex-1-02/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://benjamin-philip.github.io/sicp/exercises/sicp-ex-1-02/</guid>
      <description>So getting to the matter: This the second exercise in SICP. It&amp;rsquo;s basically change mathematical notation to prefix.
Question Exercise 1.2: Translate the following expression into prefix form.
$$\frac{5 + 4 + (2 - (3 - (6 + \frac{4}{5})))}{3(6 - 2)(2 - 7)}$$
My thoughts Like I mentioned before, basically, change mathematical notation to prefix.
The Answer The first thing that happens is the division. So lets start with that:</description>
    </item>
    
    <item>
      <title>Exercise 1.3</title>
      <link>https://benjamin-philip.github.io/sicp/exercises/sicp-ex-1-03/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://benjamin-philip.github.io/sicp/exercises/sicp-ex-1-03/</guid>
      <description>This is the third Sicp Exercise, and we finally start writing scheme programs! So without further delay&amp;hellip;
The Question Exercise 1.3: Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.
Thoughts So here we will most likely will have to copy the code sum of squares (make copying a habit. Half of what programmers do is copy pasting. The other half is understanding what you are copy-pasting.</description>
    </item>
    
    <item>
      <title>Exercise 1.1</title>
      <link>https://benjamin-philip.github.io/sicp/exercises/sicp-ex-1-01/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://benjamin-philip.github.io/sicp/exercises/sicp-ex-1-01/</guid>
      <description>So I had just started reading SICP. Itâ€™s this amazing book that was used to teach Comp Sc. to students who had never programmed before at MIT. When I thought that I should write a blog post with a solution for every exercise I attempt. So I am gonna write solutions for all the exercise in SICP. My plan is to finish this book in one year.
You can obtain a copy of SICP for free because of MIT-Open course ware!</description>
    </item>
    
  </channel>
</rss>
