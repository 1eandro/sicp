<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Examples on Ben&#39;s Solutions to Sicp</title>
    <link>https://bphilip.gitlab.io/sicp/examples/</link>
    <description>Recent content in Examples on Ben&#39;s Solutions to Sicp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://bphilip.gitlab.io/sicp/examples/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Example - Testing for Primality</title>
      <link>https://bphilip.gitlab.io/sicp/examples/example-testing-for-primality/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bphilip.gitlab.io/sicp/examples/example-testing-for-primality/</guid>
      <description>This is section describes of methods for checking whether a number n is prime or not. One with order of growth $\theta(\sqrt[]{n})$ and another of growth $\theta(\log n)$.
The First method A common way to check if a number is prime or not is by finding all the factors of that number. Take the number 2. Its&#39; factors are 1 and 2. Thus it is prime. Or take 6. It can be expressed as $\times[2][3]3$ or $\times[6][1]$.</description>
    </item>
    
    <item>
      <title>Example: Counting Change</title>
      <link>https://bphilip.gitlab.io/sicp/examples/example-counting-change/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bphilip.gitlab.io/sicp/examples/example-counting-change/</guid>
      <description>In this Example, we write a recursive procedure to calculate the number of possible ways to tend change to a given value.
The Problem Suppose you have a sum of 1 dollar. Let&amp;rsquo;s say you bought a coffee for 90 cents, and the cafeteria needs to pay you back 10 cents. How do find number of ways to the cafeteria can pay you back your change? One such way is to manually count the possible ways.</description>
    </item>
    
    <item>
      <title>Example: Square roots by Newton&#39;s Method</title>
      <link>https://bphilip.gitlab.io/sicp/examples/example-newtons-square-root/</link>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bphilip.gitlab.io/sicp/examples/example-newtons-square-root/</guid>
      <description>All the Procedures explained previously were much like ordinary Mathematical functions. However in Mathematics, we are usually concerned with declarative (what is) descriptions. We soon reach issues when deriving procedure from their Mathematical definition. Consider the definition of the Square root:
$ \sqrt{x} = $ the y such that $ y \geq 0 $ and $ ^{2} = x $
The above is a perfectly legitimate mathematical function BUT doesn&amp;rsquo;t tell use how to compute the sqrt.</description>
    </item>
    
  </channel>
</rss>
